####IOC(控制反转)
#   https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC
#   依赖注入,依赖查找
    实现控制反转主要有两种方式：依赖注入和依赖查找。
    两者的区别在于，前者是被动的接收对象，在类A的实例创建过程中即创建了依赖的B对象，通过类型或名称来判断将不同的对象注入到不同的属性中，
    而后者是主动索取相应类型的对象，获得依赖对象的时间也可以在代码中自由控制。

###Java基础知识整理
#   https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Multithread/JavaConcurrencyBasicsCommonInterviewQuestionsSummary.md

###线程池使用完记得shutdown,否则JVM不会关闭

###创建线程和线程池时,要加上名字,方便日后定位错误

###Timer,在Timer中未被捕获的异常会清空其他Timer任务
#   可以使用ScheduledThreadPoolExecutor重写

###SimpleDateFormat是线程不安全的
#   多线程下需要加锁,或使用ThreadLocal变量让每个线程操作自己的变量

###ConcurrentHashMap
#   put会覆盖k,v
#   putIfAbsent

###TPS(Transactions Per Second（每秒传输的事物处理个数)

###QPS(每秒查询率)

###logback开源日志组件

###用户线程
#   main函数所在的线程就是用户线程,最后一个非守护线程结束,JVM会正常退出
###守护线程
#   守护线程是否结束并不影响JVM的退出

###OOM,Out of Memory,内存用完了

###Semaphore(信号量)
#   信号递增策略,一开始不需要关心同步的线程个数,等调用
    acquire方法时再指定需要同步的个数

###CyclicBarrier(回环屏障)
#   可复用,适合分段任务有序执行的场景,内部有个计数器

###CountDownLatch
#   join会阻塞,CountDownLatch使用计数器不阻塞
#   CountDownLatch不用在thread上操作,更灵活
#   不可复用

###ScheduledThreadPoolExecutor
#   定时任务线程池
    Rate(N秒执行一次)和Delay(每一次执行终止和下一次执行开始之间都存在给定的延迟)
#   https://juejin.im/post/5ae75604f265da0ba56753cd

###线程池
#   线程池使用一个Integer类型的原子变量来记录线程池状态和线程池中的线程个数
    通过线程池来控制任务的执行,每个Worker线程可以处理多个任务.线程池通过线程的复用减少了线程创建和销毁的开销

###DelayQueue
#   无界阻塞延迟队列,队列中的每个元素都有个过期时间,只有过期元素才会出队列
    队列头元素是最快要过期的元素
    使用PriorityQueue存放数据

###平衡二叉树
#   平衡因子为其左子树的高度减去右子树高度的差
#   各个节点的平衡因子的绝对值<=1

###PriorityBlockingQueue
#   带优先级的无界(没有notFull条件)阻塞队列
    内部使用平衡二叉树维护元素优先级
    需要实现Comparable接口的compareTo方法自定义优先级比较规则

###ArrayBlockingQueue
#   有界(可以防止OOM)阻塞队列
    size操作精确,因为计算前加了全局锁

###虚假唤醒
#   所有的wait,await都要放在while里面

###LinkedBlockingQueue(阻塞链表队列)
#   offer(提供),队列尾部插入元素,队列满则丢弃当前元素,返回false
#   put(放),队列尾部插入元素,队列满则阻塞,直到成功
#   poll(剪短),获取队列头部获取并移除一个元素,队列为空则返回null
#   peek(偷看),获取队列头部元素不从队列移除它
#   take,获取队列头部元素并移除它,队列为空则阻塞,直到队列不为空返回元素
#   单向链表
    头(出队),尾部(入队),独占锁,AQS阻塞队列
    notEmpty(take,peek,poll),notFull(offer,put)
#   size操作不精确

###ConcurrentLinkedQueue
#   底层使用单向链表数据结构保存队列元素,CAS算法,没有加锁,size不精确
#   node节点,head,tail,q,p
#   peek,poll/offer

###StampedLock
#   不可重入锁
#   提供三种读写模式:
    写锁writeLock
    悲观读锁readLock
    乐观读锁tryOptimisticRead

###ReentrantReadWriteLock
#   读写分离策略,允许多个线程可以同时获取读锁
#   适合读多写少
#   写锁和读锁是互斥的
#   state高16位表示读锁,低16位表示写锁

###ReentrantLock
#   可重入独占锁
#   公平锁&非公平锁(默认)

###抽象同步队列AQS

###jps，即可查看当前已启动的进程和对应的PID
#   jstack pid 是java虚拟机自带的一种堆栈跟踪工具

###LockSupport工具类
#   主要作用是挂起和唤醒线程
    唤醒需要许可证,默认线程不带许可证
    park,unpark

###CopyOnWriteArrayList
#   使用写时复制的策略来保证list的一致性
    使用了独占锁,提供弱一致性,迭代器获取的是一个快照

###longAccumulator
#   LongAdder是longAccumulator的一个特例,后者提供更强大的功能,可以自定义累加规则

###LongAdder
#   在内部维护多个Cell元素来分担对单个变量进行争夺开销(CAS)

###AtomicLong
#   原子操作类使用了CAS非阻塞算法,性能比阻塞的synchronized好,但是高并发情况下会存在性能问题
#   所以JDK8新增了操作类LongAdder

##ThreadLocalRandom
#   使用ThreadLocal让每一个线程持有一个本地的种子变量,避免了竞争.

###java.util.Random
#   生成新的随机数需要种子,种子使用了CAS操作,自旋锁重试,多线程的时候效率比较低.

###自旋锁
#   当线程在获取锁时,如果发现锁已经被其他线程占有,它不马上阻塞自己,
在不放弃CPU使用权的情况下,多次尝试获取,很有可能在后面几次尝试中其他线程已经释放了锁.
如果尝试指定次数后仍没有获取到锁则会被阻塞挂起.自旋锁是CPU时间换取线程阻塞与调度的开销.

###可重入锁
#   一个线程获取了锁,那么可以无限次数的进入被该锁锁住的代码(synchronized是可重入锁)

###独占锁
#   保证任何时候都只有一个线程能得到锁
###共享锁
#   允许多个线程同时进行读操作

###公平锁
#   最早请求锁的线程就最早获取到锁(ReentrantLock pairLock=new ReentrantLock(true))
###非公平锁
#   先来不一定先得(ReentrantLock pairLock=new ReentrantLock(false))
#   在没有公平性需求的前提下尽量使用非公平锁,公平锁会带来性能开销

###悲观锁
#   在数据被处理前先对数据进行加锁,
###乐观锁
#   在进行数据提交更新时,才会正式对数据冲突与否进行检测

###伪共享
#   当多个线程同时修改一个缓存行里面的多个变量时,由于同时只能有一个线程操作缓存行,所以相比将每一个变量放到一个缓存行,
    性能会有所下降,这就是伪共享

###JAVA中的CAS操作
#   Compare and Swap 类似,MYSQL中手动实现的乐观锁,先比较时间戳再进行更新
#   unsafe类提供了类似的CAS操作

###volatile 关键字详解
#   https://www.cnblogs.com/dolphin0520/p/3920373.html
#   保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。
#   禁止进行指令重排序。(内存栅栏)
###什么时候使用volatile关键字
#   写入变量值不依赖变量的当前值时
#   读写变量值时没有加锁

###并发与并行的区别？
#   你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。
#   你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。
#   你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。
#   并发的关键是你有处理多个任务的能力，不一定要同时。并行的关键是你有同时处理多个任务的能力。
所以我认为它们最关键的点就是：是否是『同时』。

###线程是CPU分配的基本单位

###进程{堆,方法区,线程}
#   线程{程序计数器,栈}

###JAVA中三种线程创建方式
#   实现Runnable接口的run方法
#   继承Thread类,重写run方法
#   使用FutureTask方式

###使wait返回的方法
#   notify(),notifyAll()
#   interrupt(),抛出异常

###线程获取共享变量的监视器锁
#   synchronized代码块
#   synchronized修饰方法

###在并发编程中，我们通常会遇到以下三个问题：
#   原子性问题   类似数据库的事务,多个操作,要么全部执行,要么就都不执行
#   可见性问题   类似事务隔离界别,是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值
#   有序性问题   即程序执行的顺序按照代码的先后顺序执行(特殊情况"指令重排序")

###上下文切换时机
#   当前线程的CPU时间片使用完处于就绪状态时
#   当前线程被其他线程中断时

###死锁产生必备的四个条件
#   互斥条件
#   请求并持有
#   不可剥夺条件
#   环路等待条件

###位移运算符
#   <<  左移运算符，num << 1,相当于num乘以2
#   >>  右移运算符，num >> 1,相当于num除以2
#   >>> 无符号右移，忽略符号位，空位都以0补齐

#同一个类,同一个包,不同包的子类,不同包非子类
private Y
默认 Y,Y
protected Y,Y,Y
public Y,Y,Y,Y

#equals比较的是内容
#==比较的是两个引用是否指向同一个对象

###格式化时间
DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
df.format(date)

###内部类的作用
封装;提供命名空间;方便访问外部类成员

###TCP 传输控制协议
###UDP 用户数据报协议

###String,StringBuffer,StringBuilder
String          对象是不可变的,线程安全.
StringBuffer    对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。
StringBuilder   并没有对方法进行加同步锁，所以是非线程安全的。　
操作少量的数据: 适用String
单线程操作字符串缓冲区下操作大量数据: 适用StringBuilder
多线程操作字符串缓冲区下操作大量数据: 适用StringBuffer

###java只有值传递
#数组的值传递保存的是同一个指针,所以会改变原数据

#hashCode() 的作用是获取哈希码
#重写 equals 时必须重写 hashCode 方法
#hashCode用来在加入HashSet前,判断是否重复
#两个对象有相同的 hashcode 值，它们也不一定是相等的,hashcode 只是用来缩小查找成本

###**静态编译：**在编译时确定类型，绑定对象
###**动态编译：**运行时确定类型，绑定对象

###反射
JAVA 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；
这种动态获取的信息以及动态调用对象的方法的功能称为 java 语言的反射机制。
优点： 运行期类型的判断，动态加载类，提高代码灵活度。
缺点： 性能瓶颈：反射相当于一系列解释操作，通知 JVM 要做的事情，性能比直接的 java 代码要慢很多

###接口和抽象类的区别是什么?
接口的方法默认是 public，所有方法在接口中不能有实现，抽象类可以有非抽象的方法
接口中的实例变量默认是 final 类型的，而抽象类中则不一定
一个类可以实现多个接口，但最多只能实现一个抽象类
一个类实现接口的话要实现接口的所有方法，而抽象类不一定
接口不能用 new 实例化，但可以声明，但是必须引用一个实现该接口的对象 从设计层面来说，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。
注意：Java8 后接口可以有默认实现( default )。

###Java序列化中如果有些字段不想进行序列化，怎么办？
对于不想进行序列化的变量，使用transient关键字修饰。
transient关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被transient修饰的变量值不会被持久化和恢复。
transient只能修饰变量，不能修饰类和方法。

### 获取用键盘输入常用的两种方法
方法1：通过 Scanner
Scanner input = new Scanner(System.in);
String s  = input.nextLine();
input.close();
方法2：通过 BufferedReader
BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
String s = input.readLine();

###正确使用 equals 方法
Objects.equals(null,"SnailClimb");// false

###如何正确的将数组转换为ArrayList
List list = new ArrayList<>(Arrays.asList("a", "b", "c"))
//
Integer [] myArray = { 1, 2, 3 };
List myList = Arrays.stream(myArray).collect(Collectors.toList());
//基本类型也可以实现转换（依赖boxed的装箱操作）
int [] myArray2 = { 1, 2, 3 };
List myList = Arrays.stream(myArray2).boxed().collect(Collectors.toList());